{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New Script": {
		"prefix": "new-script",
		"description": "Template for Python scripts.",
		"body": [
			"#!/usr/bin/env python3"
			, "\"\"\"${1:SCRIPT_NAME}.py"
			, ""
			, "${6:This script...}"
			, ""
			, "    Author      : ${2:Makiah Merritt <Makiah.Merritt@pers.oregon.gov>}"
			, "    Prerequisite: ${3:Python 3}"
			, "    History     : ${4:$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE.$CURRENT_HOUR$CURRENT_MINUTE merritm}, Initial version."
			, ""
			, "    Requirements:"
			, "      - ${5:TBA}"
			, ""
			, "Args:"
			, "    NAME (TYPE): DESC"
			, ""
			, "Example:"
			, "    This example goes through setting up a venv and pointing VSCode at it. (REF[04])"
			, ""
			, "    Creating the venv"
			, "        {code:powershell}"
			, "        PS> \\$venvDir = \"C:\\\\\\Workspaces\\\\\\\\\\$(\\$env:USERNAME.Replace('.priv', ''))\\\\\\py\\\\\\\\${7:__SCRIPT_VENV__}\""
			, "        PS> python -m pip install --upgrade pip"
			, "        PS> python -m venv \\$venvDir"
			, "        PS> & \"\\$venvDir\\\\\\Scripts\\\\\\activate.ps1\""
			, "        (${7:__SCRIPT_VENV__}) PS> py -m pip install --upgrade pip"
			, "        (${7:__SCRIPT_VENV__}) PS> py -m pip install --upgrade __REQUIRED_MODULE__"
			, "        (${7:__SCRIPT_VENV__}) PS> pip freeze > \"__SCRIPT_DIR__\\\\\\\\${1:SCRIPT_NAME}_Requirements.txt\""
			, "        (${7:__SCRIPT_VENV__}) PS> deactivate"
			, "        {/code:powershell}"
			, ""
			, "    In VS Code, set the path to the new interpreter \"\\$venvDir\\\\\\Scripts\\\\\\python.exe\""
			, ""
			, "Example:"
			, "    This example... TBA"
			, ""
			, "        {code:python}"
			, "        TBA"
			, "        {/code:python}"
			, ""
			, "Returns:"
			, "    TBA"
			, ""
			, "References:"
			, "    TBA"
			, "\"\"\""
			, ""
			, "#==============================================================================="
			, "# 0.0 - Requirements, Parameters, Includes, Definitions, and Declarations"
			, "#==============================================================================="
			, "#region Requirements, Includes, Definitions, and Declarations"
			, "#region Initialization Methods"
			, "def init_argparse(): # -> argparse.ArgumentParser:"
			, "    \"\"\"${1:SCRIPT_NAME}.py::init_argparse()"
			, ""
			, "    This method initializes argparse. It will return a new argument parser with"
			, "    this script's expected parameters."
			, ""
			, "    Returns:"
			, "        parser      (argparse.ArgumentParser) A parser for CMD_ARGS"
			, "    \"\"\""
			, ""
			, "    parser = argparse.ArgumentParser("
			, "        usage=\"%(prog)s [OPTION] [FILE]...\","
			, "        description=\"__DESCRIPTION__.\","
			, "    )"
			, ""
			, "    parser.add_argument(\"--NoTranscript\""
			, "        , action='store_true'"
			, "        , help=\"If passed, no log file will be generated.\""
			, "        , required=False"
			, "    )"
			, ""
			, "    parser.add_argument("
			, "          \"--LogLevel\", \"--ll\""
			, "        , type=str"
			, "        , default=\"INFO\""
			, "        , help=\"The python script's log level. \""
			, "               \"\""
			, "               \"Accepts: 'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'\""
			, "               \"Default: 'INFO'\""
			, "    )"
			, ""
			, "    return parser"
			, "#-- /init_argparse() definition --"
			, ""
			, "def script_init():"
			, "    \"\"\"${1:SCRIPT_NAME}.py::script_init()"
			, ""
			, "    This method initializes the script's output directories & logging."
			, ""
			, "    Return:"
			, "        None. The script's logDirectory and tempDirectory variables are updated."
			, ""
			, "    References:"
			, "        REF[01][02][03]"
			, "    \"\"\""
			, "    global SCRIPT_NAME"
			, "    global CMD_ARGS"
			, "    global LOG_AGE"
			, "    global logDirectory"
			, "    global tempDirectory"
			, ""
			, "    CMD_ARGS  = init_argparse().parse_args()"
			, "    timestamp = datetime.datetime.now().strftime(\"%Y%m%d.%H%M\")"
			, ""
			, "    #==== Initialize Directories ===="
			, "    rootDrive = \"C:\\\\\\\""
			, "    if os.path.exists(\"D:\\\\\\\"):"
			, "        rootDrive = \"D:\\\\\\\""
			, ""
			, "    logDirectory  = os.path.join(rootDrive, logDirectory)"
			, "    if os.path.exists(logDirectory) == False:"
			, "        os.makedirs(logDirectory)"
			, ""
			, "    tempDirectory = os.path.join(logDirectory, \"temp\", timestamp)"
			, "    if os.path.exists(tempDirectory) == False:"
			, "        os.makedirs(tempDirectory,)"
			, ""
			, "    #==== Initialize Logging ===="
			, "    # logLevel will apply to the console's output."
			, "    # The log file should have everything. (logging.INFO)"
			, "    logLevel = logging.INFO"
			, "    # logLevel = logging.DEBUG"
			, "    if CMD_ARGS.LogLevel == \"DEBUG\":"
			, "        logLevel = logging.DEBUG"
			, "    elif CMD_ARGS.LogLevel == \"INFO\":"
			, "        logLevel = logging.INFO"
			, "    elif CMD_ARGS.LogLevel == \"WARNING\":"
			, "        logLevel = logging.WARNING"
			, "    elif CMD_ARGS.LogLevel == \"ERROR\":"
			, "        logLevel = logging.ERROR"
			, "    elif CMD_ARGS.LogLevel == \"CRITICAL\":"
			, "        logLevel = logging.CRITICAL"
			, ""
			, "    logProperties             = {}"
			, "    logProperties['level']    = logging.INFO"
			, "    logProperties['filename'] = os.path.join(logDirectory, (SCRIPT_NAME + \"_\" + timestamp + \".log\"))"
			, "    logProperties['encoding'] = 'utf-8'"
			, "    logProperties['format']   = '[%(asctime)s %(levelname)s %(name)s %(filename)s:%(lineno)s:%(funcName)s()] %(message)s'"
			, "    # logProperties['datefmt']  = '%Y-%m-%d %H:%M:%S'"
			, ""
			, "    logging.basicConfig(**logProperties)"
			, "    console = logging.StreamHandler(sys.stdout)"
			, "    console.setLevel(logLevel)"
			, "    console.setFormatter(logging.Formatter('[%(asctime)s %(levelname)s %(name)s] %(message)s'))"
			, "    logging.getLogger().addHandler(console)"
			, ""
			, "    if CMD_ARGS.NoTranscript:"
			, "        logging.getLogger().removeHandler(logging.getLogger().handlers[0])"
			, ""
			, "    #==== Remove Old Logs ===="
			, "    for collection in os.walk(logDirectory, topdown=False):"
			, "        walkRoot  = collection[0]"
			, "        walkDirs  = collection[1]"
			, "        walkFiles = collection[2]"
			, ""
			, "        # Remove Old Files"
			, "        for file in walkFiles:"
			, "            filePath   = os.path.join(walkRoot, file)"
			, "            fileStat   = os.stat(filePath)"
			, "            last_adays = datetime.timedelta(seconds=(time.time() - fileStat.st_atime)).days"
			, "            last_cdays = datetime.timedelta(seconds=(time.time() - fileStat.st_ctime)).days"
			, "            last_mdays = datetime.timedelta(seconds=(time.time() - fileStat.st_mtime)).days"
			, ""
			, "            if((LOG_AGE <= last_cdays) and (LOG_AGE <= last_mdays)):"
			, "                logging.info(\"Removing old file:\""
			, "                             \"\\n  - Age Limit    : {} days\""
			, "                             \"\\n  - Creation     : {} days ({})\""
			, "                             \"\\n  - Last Modified: {} days ({})\""
			, "                             \"\\n  - Last Access  : {} days ({})\""
			, "                             \"\\n  - File Path    : '{}'\".format("
			, "                                LOG_AGE,"
			, "                                last_cdays, time.strftime('%m/%d/%Y %H:%M:%S', time.localtime(fileStat.st_ctime)),"
			, "                                last_mdays, time.strftime('%m/%d/%Y %H:%M:%S', time.localtime(fileStat.st_mtime)),"
			, "                                last_adays, time.strftime('%m/%d/%Y %H:%M:%S', time.localtime(fileStat.st_atime)),"
			, "                                filePath,"
			, "                            ))"
			, "                os.remove(filePath)"
			, ""
			, "        # Prune empty directories (REF[08])"
			, "        if ((not walkDirs and not walkFiles)"
			, "        and ((walkRoot in [logDirectory, tempDirectory]) == False)):"
			, "            logging.info(\"Removing empty directory: '{}'\".format(walkRoot))"
			, "            shutil.rmtree(walkRoot)"
			, ""
			, "    logging.info(\"\\n{}\\n<{}> Started. (Log Level: '{}', Log File: '{}')\\n{}\".format("
			, "        \"*\"*80"
			, "        , __file__"
			, "        , logging.getLevelName(logLevel)"
			, "        , (logProperties['filename'] if (CMD_ARGS.NoTranscript == False) else \"N/A\")"
			, "        , \"*\"*80"
			, "    ))"
			, "#-- /script_init() definition --"
			, ""
			, "def script_cleanup():"
			, "    \"\"\"${1:SCRIPT_NAME}.py::script_cleanup()"
			, ""
			, "    This method will handle any cleanup required for this script."
			, ""
			, "    Return:"
			, "        None."
			, "    \"\"\""
			, "    global SCRIPT_NAME"
			, "    global tempDirectory"
			, ""
			, "    logging.info(\"Cleaning up after {}.\".format(SCRIPT_NAME))"
			, "    if os.path.exists(tempDirectory):"
			, "        shutil.rmtree(path=tempDirectory)"
			, "        logging.info(\"The temporary directory has been removed. (Target: '{}')\".format(tempDirectory))"
			, "#-- /script_cleanup() definition --"
			, "#endregion Initialization Methods"
			, ""
			, ""
			, "#region Includes & Requirements"
			, "#-------------------------------------------------------------------------------"
			, "# Includes & Requirements"
			, "#-------------------------------------------------------------------------------"
			, "#region BaseIncludes"
			, "import os, sys, shutil, subprocess, logging, json, time, datetime, argparse"
			, "import re as regex"
			, "#endregion BaseIncludes"
			, ""
			, "#region BaseInitializations"
			, "# Initialization methods appear before we start running custom imports because some"
			, "# modules may interfere with the logging utility."
			, "SCRIPT_PATH     = __file__                      # Full path of this script"
			, "SCRIPT_LOCATION = os.path.dirname(__file__)     # Directory of this script, alt. sys.path[0]"
			, "SCRIPT_NAME     = os.path.basename(__file__)    # Name of this script"
			, "CMD_ARGS        = None"
			, "LOG_AGE         = 60 # Days"
			, ""
			, "logDirectory  = r\"\\script-executions\\\\${8:__SCRIPT_LOG_DIR__}\""
			, "tempDirectory = ''"
			, "script_init()"
			, "#endregion BaseInitializations"
			, ""
			, "#region Requirements"
			, "#-- Python Version --"
			, "MIN_PYTHON = (3, 9)"
			, "if sys.version_info < MIN_PYTHON:"
			, "    sys.exit(\"Python %s.%s or later is required.\\n\" % MIN_PYTHON)"
			, ""
			, "#-- Installed Modules --"
			, "REQUIRED_MODULES = []"
			, ""
			, "if len(REQUIRED_MODULES) > 0:"
			, "    installedModules = subprocess.check_output([\"pip\", \"list\", \"--local\", \"--not-required\", \"--format=json\", \"--disable-pip-version-check\"])"
			, "    installedModules = json.loads(installedModules)"
			, "    for rm in REQUIRED_MODULES:"
			, "        moduleInstalled = False"
			, "        for im in installedModules:"
			, "            if rm == im['name']:"
			, "                moduleInstalled = True"
			, "                break"
			, ""
			, "        if moduleInstalled == False:"
			, "            sys.exit(\"FAILURE: The required '{}' module is not installed.\".format(rm))"
			, ""
			, "    logging.debug(\"All required modules ['{}'] are installed.\".format(\"', '\".join(REQUIRED_MODULES)))"
			, "#endregion Requirements"
			, ""
			, "#region AdditionalIncludes"
			, "#endregion AdditionalIncludes"
			, "#endregion Includes & Requirements"
			, ""
			, ""
			, "#region Variables"
			, "#-------------------------------------------------------------------------------"
			, "# Variables"
			, "#-------------------------------------------------------------------------------"
			, "#endregion Variables"
			, ""
			, ""
			, "#region Pre-Condition Checks"
			, "#-------------------------------------------------------------------------------"
			, "# Pre-Condition Checks"
			, "#-------------------------------------------------------------------------------"
			, "#endregion Pre-Condition Checks"
			, ""
			, ""
			, "#region Functions"
			, "#-------------------------------------------------------------------------------"
			, "# Functions"
			, "#-------------------------------------------------------------------------------"
			, "def main():"
			, "    \"\"\"${1:SCRIPT_NAME}.py::main()"
			, ""
			, "    Main entry point for ${1:SCRIPT_NAME}.py."
			, ""
			, "    Return:"
			, "        None."
			, "    \"\"\""
			, "    try:"
			, "        ${0}"
			, "    finally:"
			, "        script_cleanup()"
			, "#-- /main() definition --"
			, "#endregion Functions"
			, "#endregion Requirements, Includes, Definitions, and Declarations"
			, ""
			, ""
			, "#==============================================================================="
			, "# 1.0 - Main Process:"
			, "#==============================================================================="
			, "if __name__ == \"__main__\":"
			, "    startTime = time.time()"
			, "    main()"
			, "    endTime = time.time()"
			, "    logging.info(\"\\n{}\\n<{}> is complete. (Elapsed Time: '{}')\\n{}\".format("
			, "        \"*\"*80, __file__, str(datetime.timedelta(seconds=(endTime - startTime))), \"*\"*80"
			, "    ))"
		],
	},
	"New Function": {
		"prefix": "new-fun",
		"description": "Template for Python functions.",
		"body": [
			  "def ${1:FUNCTION_NAME}():"
			, "    \"\"\"${1:FUNCTION_NAME}()"
			, ""
			, "    ${2:This method...}"
			, ""
			, "    Return:"
			, "        TBA."
			, "    \"\"\""
			, "    ${3:FUNCTION_BODY}"
			, "#-- /${1:FUNCTION_NAME}() definition --"
		],
	}
}

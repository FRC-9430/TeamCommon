{
	// Place your snippets for powershell here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New Header": {
		"prefix": "new-fun-head",
		"description": "A standard function header.",
		"body": [
			  "<#"
			, ".SYNOPSIS"
			, "    ${4:This function will..}"
			, ""
			, ".DESCRIPTION"
			, "    ${5:This function...}"
			, ""
			, ".NOTES"
			, "    Function Name: ${1:FunctionName}"
			, "    Author       : ${2:Brandon Bontrager <Brandon.Bontrager@pers.oregon.gov>}"
			, "    History      : ${3:$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE.$CURRENT_HOUR$CURRENT_MINUTE bontrab}, Initial version."
			, ""
			, ".PARAMETER TBA"
			, "    TBA"
			, ""
			, "    Data type                    TBA"
			, "    Default value                TBA"
			, "    Alias'                       TBA/None"
			, "    Accepts                      TBA"
			, ""
			, ".EXAMPLE"
			, "    #"
			, "    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
			, "    # ${6:Outcome: This example...}"
			, "    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
			, "    TBA"
			, ""
			, ".INPUTS"
			, "    ${7:None. Objects cannot be piped into ${1:FunctionName}.}"
			, ""
			, ".OUTPUTS"
			, "    ${8:None.}"
			, ""
			, ".LINK"
			, "    ${9:ref[01]: None.}"
			, "#>"
		],
	},
	"New Function": {
		"prefix": "new-fun",
		"description": "A standard function template, with header.",
		"body": [
			  "<#"
			, ".SYNOPSIS"
			, "    ${4:This function will..}"
			, ""
			, ".DESCRIPTION"
			, "    ${5:This function...}"
			, ""
			, ".NOTES"
			, "    Function Name: ${1:FunctionName}"
			, "    Author       : ${2:Brandon Bontrager <Brandon.Bontrager@pers.oregon.gov>}"
			, "    History      : ${3:$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE.$CURRENT_HOUR$CURRENT_MINUTE bontrab}, Initial version."
			, ""
			, ".PARAMETER TBA"
			, "    TBA"
			, ""
			, "    Data type                    TBA"
			, "    Default value                TBA"
			, "    Alias'                       TBA/None"
			, "    Accepts                      TBA"
			, ""
			, ".EXAMPLE"
			, "    #"
			, "    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
			, "    # ${6:Outcome: This example...}"
			, "    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
			, "    TBA"
			, ""
			, ".INPUTS"
			, "    ${7:None. Objects cannot be piped into ${1:FunctionName}.}"
			, ""
			, ".OUTPUTS"
			, "    ${8:None.}"
			, ""
			, ".LINK"
			, "    ${9:ref[01]: None.}"
			, "#>"
			, "function ${1:FunctionName} {"
			, "    [CmdletBinding()]"
			, "    Param(${10}) #-- /Param() --"
			, "    Begin {${11}} #-- /Begin{} --"
			, "    Process {${13}} #-- /Process{} --"
			, "    End {${12}} #-- /End{} --"
			, "} #-- /${1:FunctionName}() definition --"
		],
	},
	"New Script": {
		"prefix": "new-script",
		"description": "Template for PowerShell scripts.",
		"body": [
			  "<#"
			, ".SYNOPSIS"
			, "    ${11:This script will...}"
			, ""
			, ".DESCRIPTION"
			, "    ${12:This script will...}"
			, ""
			, ".NOTES"
			, "    File Name   : ${1:SCRIPT_NAME}.ps1"
			, "    Author      : ${2:Brandon Bontrager <Brandon.Bontrager@pers.oregon.gov>}"
			, "    Prerequisite: ${3:PSVersion 5.1}"
			, "    History     : ${4:$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE.$CURRENT_HOUR$CURRENT_MINUTE bontrab}, Initial version."
			, ""
			, "    REQUIREMENTS"
			, "      - ${5:This script can only be executed from a local drive, network locations are NOT accepted.}"
			, ""
			, "    This script can:"
			, "      - ${6:TBA}"
			, ""
			, ".PARAMETER NoTranscript"
			, "    Prevents the creation of a new transcript log."
			, ""
			, "    Data type                    Switch"
			, "    Default value                False"
			, "    Alias'                       None"
			, "    Accepts                      \\$True, \\$False"
			, ""
			, ".PARAMETER ClearScriptErrors"
			, "    Tells the script to clear any errors it generated once"
			, "    ready to return."
			, ""
			, "    Data type                    Switch"
			, "    Default value                False"
			, "    Alias'                       None"
			, "    Accepts                      \\$True, \\$False"
			, ""
			, ".EXAMPLE"
			, "    #"
			, "    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
			, "    # ${8:Outcome: This example...}"
			, "    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
			, "    & \"{SCRIPT_PATH}\\\\${1:SCRIPT_NAME}.ps1\" ${7}"
			, ""
			, ".INPUTS"
			, "    ${9:None. Objects cannot be piped into ${1:SCRIPT_NAME}.ps1.}"
			, ""
			, ".OUTPUTS"
			, "    C:\\script-executions\\\\${10}\\\\${1:SCRIPT_NAME}_yyyy-MM-dd.HH-mm-ss.log"
			, "        (If NoTranscript == False) A transcript of this script's execution."
			, "#>"
			, ""
			, ""
			, "#==============================================================================="
			, "# 0.0 - Requirements, Parameters, Includes, Definitions, and Declarations"
			, "#==============================================================================="
			, "#region Requirements, Includes, Definitions, and Declarations"
			, "#REQUIRES -Version 5.1"
			, "[cmdletbinding()]"
			, ""
			, ""
			, "#region Parameters"
			, "Param("
			, "    [Parameter("
			, "          Mandatory   = \\$False"
			, "        , HelpMessage = \"By default this script starts a new transcript. \" `"
			, "                      + \"Passing this switch, prevents the creation of a new \" `"
			, "                      + \"transcript log.\""
			, "    )]"
			, "    [switch]\\$NoTranscript"
			, ""
			, "    ,"
			, "    [Parameter("
			, "          Mandatory   = \\$False"
			, "        , HelpMessage = \"By passing this parameter, any errors generated while \" `"
			, "                      + \"this script was run will be cleared. Any pre-existing \" `"
			, "                      + \"errors in `\\$Error are retained.\""
			, "    )]"
			, "    [switch]\\$ClearScriptErrors"
			, ")"
			, ""
			, "# \\$NoTranscript is handled further down."
			, "# if(!\\$NoTranscript) {"
			, "# }"
			, "#endregion Parameters"
			, ""
			, ""
			, "#region Includes"
			, "#-------------------------------------------------------------------------------"
			, "# Includes"
			, "#-------------------------------------------------------------------------------"
			, "\\$DefaultErrorActionPreference = \\$GLOBAL:ErrorActionPreference"
			, "\\$GLOBAL:ErrorActionPreference = [System.Management.Automation.ActionPreference]::Stop"
			, ""
			, "# ... includes ..."
			, ""
			, "\\$GLOBAL:ErrorActionPreference = \\$DefaultErrorActionPreference"
			, "#endregion Includes"
			, ""
			, ""
			, "#region Variables"
			, "#-------------------------------------------------------------------------------"
			, "# Variables"
			, "#-------------------------------------------------------------------------------"
			, "\\$PRIMARY_DRIVE      = if(Test-Path -Path \"D:\\\") { \"D:\" } else { \"C:\" }"
			, "\\$LOGS_DIR           = \"\\$PRIMARY_DRIVE\\script-executions\\\\${10}\""
			, "\\$LOG_NAME           = \\$MyInvocation.MyCommand.Name"
			, "\\$LOG_AGE            = 60 # Days"
			, "\\$SCRIPT_LOCATION    = \\$PSScriptRoot"
			, "\\$SCRIPT_NAME        = \\$MyInvocation.MyCommand.Name"
			, "\\$SCRIPT_ERROR_COUNT = 0"
			, "\\$SCRIPT_TIMER       = [System.Diagnostics.Stopwatch]::StartNew()"
			, "\\$EXISTING_ERRORS    = \\$Error.Clone()"
			, "\\$EXIT_CODE          = 0"
			, "#endregion Variables"
			, ""
			, ""
			, "#region Pre-Condition Checks"
			, "#-------------------------------------------------------------------------------"
			, "# Pre-Condition Checks"
			, "#-------------------------------------------------------------------------------"
			, "# Verify the script is executing on a local machine drive."
			, "if(([System.Uri]\\$SCRIPT:SCRIPT_LOCATION).IsUnc) {"
			, "    Write-Error \"ERROR: This script can only be executed from a local drive or a mapped drive.\" -ErrorAction Stop"
			, "}"
			, ""
			, "# Prepare Directories"
			, "\\$dirs  = @()"
			, "\\$dirs += \\$LOGS_DIR"
			, "ForEach(\\$dir in \\$dirs) {"
			, "    if (!(Test-Path -PathType Container \\$dir)) {"
			, "        \\$null = New-Item -Path \\$dir -ItemType Directory -Force"
			, "    }"
			, "}"
			, ""
			, "# Enable logging unless NoTranscript switch set on"
			, "if(!\\$NoTranscript) {"
			, "    Start-Transcript -Path (\\$SCRIPT:LOGS_DIR + '\\' + \\$SCRIPT:LOG_NAME + '_' + [DateTime]::Now.ToString(\"yyyy-MM-dd.HH-mm-ss\") + '.log')"
			, "}"
			, ""
			, "# Remove Old Items"
			, "if(Test-Path -Path \\$SCRIPT:LOGS_DIR) {"
			, "    Write-Host \"Removing Old Files (<= \\$SCRIPT:LOG_AGE days old)\""
			, "    \\$oldItems = Get-ChildItem -File -Path \"\\$SCRIPT:LOGS_DIR\" -Recurse `"
			, "              | Where-Object { (\\$_.LastWriteTime -LE \\$((Get-Date).AddDays(-\\$SCRIPT:LOG_AGE))) -And (\\$_.CreationTime -LE \\$((Get-Date).AddDays(-\\$SCRIPT:LOG_AGE))) }"
			, "    \\$oldItems | ForEach-Object {"
			, "        Write-Host \"Removing '\\$(\\$_.FullName)' (Last Accessed: '\\$(\\$_.LastAccessTime)', Last Writen: '\\$(\\$_.LastWriteTime)')\""
			, "        Remove-Item -Path \\$_.FullName"
			, "    }"
			, "}"
			, "#endregion Pre-Condition Checks"
			, ""
			, ""
			, "#region Additional Includes"
			, "#-------------------------------------------------------------------------------"
			, "# Additional Includes"
			, "#-------------------------------------------------------------------------------"
			, "\\$DefaultErrorActionPreference = \\$GLOBAL:ErrorActionPreference"
			, "\\$GLOBAL:ErrorActionPreference        = [System.Management.Automation.ActionPreference]::Stop"
			, ""
			, "# ... includes ..."
			, ""
			, "\\$GLOBAL:ErrorActionPreference = \\$DefaultErrorActionPreference"
			, "#endregion Additional Includes"
			, ""
			, ""
			, "#region Functions"
			, "#-------------------------------------------------------------------------------"
			, "# Functions"
			, "#-------------------------------------------------------------------------------"
			, "#endregion Functions"
			, "#endregion Requirements, Includes, Definitions, and Declarations"
			, ""
			, ""
			, "#==============================================================================="
			, "# 1.0 - Main Process:"
			, "#   1.1 - TBA"
			, "#   ..."
			, "#   1.n - TBA"
			, "#==============================================================================="
			, "#region Main"
			, "Try {"
			, "    $0"
			, "}"
			, "Catch {"
			, "    #Write error to log"
			, "    Write-Host \"ERROR: ${13:Couldn't...}\" -ForegroundColor Red"
			, "    Write-Host \\$Error[0].Exception"
			, ""
			, "    \\$SCRIPT:EXIT_CODE = 1"
			, "}"
			, "Finally {"
			, "    \\$SCRIPT:SCRIPT_TIMER.Stop()"
			, "    \\$SCRIPT:SCRIPT_ERROR_COUNT = (\\$Error.Count - \\$SCRIPT:EXISTING_ERRORS.Count)"
			, "    if(\\$ClearScriptErrors) {"
			, "        \\$Error.clear()"
			, "        ForEach(\\$ErrorRecord in \\$SCRIPT:EXISTING_ERRORS) { \\$null = \\$Error.add(\\$ErrorRecord) }"
			, "    }"
			, "    Write-Host \"\\$SCRIPT:SCRIPT_NAME completed with \\$SCRIPT:SCRIPT_ERROR_COUNT errors and warnings. (Elapsed Time: '\\$(\\$SCRIPT:SCRIPT_TIMER.Elapsed.ToString())')\" -ForegroundColor \\$(if(\\$SCRIPT:SCRIPT_ERROR_COUNT -eq 0) { \"Green\" } else { \"Red\" })"
			, ""
			, "    if(!\\$NoTranscript) { Stop-Transcript }"
			, ""
			, "    exit \\$SCRIPT:EXIT_CODE"
			, "}"
			, "#endregion Main"
		],
	},
	"New Choice Menu": {
		"prefix": "new-menu",
		"description": "Create a new PowerShell PromptForChoice object",
		"body": [
			  "\\$title         = \"$1\""
			, "\\$message       = \"$2\""
			, "\\$options       = New-Object -TypeName System.Collections.ArrayList"
			, "${3:\\$null          = \\$options.Add(\\$(New-Object System.Management.Automation.Host.ChoiceDescription '&OPT_VALUE', 'OPT_HELP_MESSAGE'))}"
			, "\\$options       = [System.Management.Automation.Host.ChoiceDescription[]]\\$options"
			, "\\$defaultOption = 0 # index of the default \\$options[] item, should the user hit 'Enter'"
			, ""
			, ""
			, "\\$response = \\$host.ui.PromptForChoice(\\$title, \\$message, \\$options, \\$defaultOption)"
			, "switch (\\$response)"
			, "{"
			, "    ${4:0 {"
			, "    \\} #-- /\\$options[0] selected --"
			, "    1 {"
			, "    \\} #-- /\\$options[1] selected --}"
			, "}"
		],
	},
	"New ArrayList": {
		"prefix": "new-array-list",
		"description": "Insert the template for a new PowerShell ArrayList object.",
		"body": [
			  "\\$${1:list} = New-Object -TypeName System.Collections.ArrayList"
		],
	},
	"Add Item to ArrayList": {
		"prefix": "add-array-list-item",
		"description": "Insert the template for adding a new item to PowerShell ArrayList object.",
		"body": [
			  "\\$null = \\$${1:list}.Add($0)"
		],
	},
	"New Timestamp - yyyyMMdd": {
		"prefix": "new-timestamp-short",
		"description": "Insert the template for obtaining the current dates timestamp as 'yyyyMMdd'.",
		"body": [
			"[DateTime]::Now.ToString('yyyyMMdd')"
		],
	},
	"New Timestamp - yyyy-MM-dd.HH-mm-ss": {
		"prefix": "new-timestamp",
		"description": "Insert the template for obtaining the current dates timestamp as 'yyyy-MM-dd.HH-mm-ss'.",
		"body": [
			"[DateTime]::Now.ToString('yyyy-MM-dd.HH-mm-ss')"
		],
	},
	"New Parameter": {
		"prefix": "new-param",
		"description": "Insert the template for a basic function parameter.",
		"body": [
			  "[Parameter("
			, "      Mandatory   = ${3:\\$False}"
			, "    , HelpMessage = \"${4:DESCRIPTION}\""
			, ")]"
			, "${5:[Alias(${6:ALIASES})]}"
			, "[${2:VARIABLE_TYPE}]\\$${1:VARIABLE_NAME}"
		],
	},
	"New Parameter - Comment Based Help": {
		"prefix": "new-param-help",
		"description": "Insert the template for defining a parameter in comment based help.",
		"body": [
			  ".PARAMETER ${1:PARAMETER_NAME}"
			, "    ${2:DESCRIPTION}"
			, ""
			, "    Data type                    ${3:PARAMETER_TYPE}"
			, "    Default value                ${4:None}"
			, "    Alias'                       ${5:None}"
			, "    Accepts                      ${6:N/A}"
		],
	},
	"New Example - Comment Based Help": {
		"prefix": "new-example-help",
		"description": "Insert the template for defining an example in comment based help.",
		"body": [
			  ".EXAMPLE"
			, "    #"
			, "    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
			, "    # Outcome: ${1:This example...}"
			, "    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
			, "    TBA"
		],
	},
	"Get Timestamp": {
		"prefix": "get-timestamp",
		"description": "Insert a timestamp in the format of 'yyyyMMdd.hhmm'",
		"body": [
			"$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE.$CURRENT_HOUR$CURRENT_MINUTE"
		],
	},
	"New Module": {
		"prefix": "new-module",
		"description": "Template for PowerShell modules.",
		"body": [
			  "<#"
			, ".SYNOPSIS"
			, "    ${11:This module contains...}"
			, ""
			, ".DESCRIPTION"
			, "    ${12:This module contains...}"
			, ""
			, "    Contained variables:"
			, "      - (exported) \\$EXPORTED_VAR"
			, "      - \\$NON_EXPORTED_VAR"
			, ""
			, "    Contained functions:"
			, "      - (exported) EXPORTED_FUNCTION"
			, "      - NON_EXPORTED_FUNCTION"
			, ""
			, ".NOTES"
			, "    File Name   : ${1:MODULE_NAME}.psm1"
			, "    Author      : ${2:Brandon Bontrager <Brandon.Bontrager@pers.oregon.gov>}"
			, "    Prerequisite: ${3:PSVersion 5.1}"
			, "    History     : ${4:$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE.$CURRENT_HOUR$CURRENT_MINUTE bontrab}, Initial version."
			, ""
			, "    REQUIREMENTS"
			, "      - ${5:This module...}"
			, ""
			, "    This module can:"
			, "      - ${6:TBA}"
			, ""
			, ".PARAMETER TBA"
			, "    TBA"
			, ""
			, "    Data type                    TBA"
			, "    Default value                TBA"
			, "    Alias'                       TBA/None"
			, "    Accepts                      TBA"
			, ""
			, ".PARAMETER ExportAll"
			, "    If passed, all functions will be exported."
			, ""
			, "    Data type                    Switch"
			, "    Default value                False"
			, "    Alias'                       None"
			, "    Accepts                      N/A"
			, ""
			, ".EXAMPLE"
			, "    #"
			, "    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
			, "    # ${8:Outcome: This will import the ${1:MODULE_NAME} module...}"
			, "    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
			, "    Import-Module \"{MODULE_PATH}\\\\${1:MODULE_NAME}.psm1\" -ArgumentList ${7}"
			, ""
			, ".INPUTS"
			, "    ${9:None. Objects cannot be piped into ${1:MODULE_NAME}.psm1.}"
			, ""
			, ".OUTPUTS"
			, "    ${10:None.}"
			, "#>"
			, ""
			, ""
			, "#==============================================================================="
			, "# 0.0 - Requirements, Parameters, Includes, Definitions, and Declarations"
			, "#==============================================================================="
			, "#region Requirements, Includes, Definitions, and Declarations"
			, "#REQUIRES -Version 5.1"
			, "[cmdletbinding()]"
			, ""
			, ""
			, "#region Parameters"
			, "Param("
			, "    [Parameter("
			, "          Mandatory   = \\$False"
			, "        , HelpMessage = \"If passed, all functions will be exported.\""
			, "    )]"
			, "    [Switch]\\$ExportAll"
			, ")"
			, "#endregion Parameters"
			, ""
			, ""
			, "#region Includes"
			, "#-------------------------------------------------------------------------------"
			, "# Includes"
			, "#-------------------------------------------------------------------------------"
			, "#endregion Includes"
			, ""
			, ""
			, "#region Global Variables"
			, "#-------------------------------------------------------------------------------"
			, "# Global Variables"
			, "#-------------------------------------------------------------------------------"
			, "\\$MODULE_LOCATION    = \\$PSScriptRoot"
			, "\\$MODULE_NAME        = \"${1:MODULE_NAME}\""
			, "\\$EXPORTED_VARIABLES = New-Object -TypeName System.Collections.ArrayList"
			, "\\$EXPORTED_ALIASES   = New-Object -TypeName System.Collections.ArrayList"
			, "\\$EXPORTED_CMDLETS   = New-Object -TypeName System.Collections.ArrayList"
			, "\\$EXPORTED_FUNCTIONS = New-Object -TypeName System.Collections.ArrayList"
			, "#endregion Global Variables"
			, ""
			, ""
			, "#region Pre-Condition Checks"
			, "#-------------------------------------------------------------------------------"
			, "# Pre-Condition Checks"
			, "#-------------------------------------------------------------------------------"
			, "#endregion Pre-Condition Checks"
			, ""
			, ""
			, "#region Module Variables"
			, "#-------------------------------------------------------------------------------"
			, "# Module Variables"
			, "#   \\$null = \\$EXPORTED_VARIABLES.Add(\"VARIABLE_NAME\")"
			, "#-------------------------------------------------------------------------------"
			, "#endregion Module Variables"
			, ""
			, ""
			, "#region Module Aliases"
			, "#-------------------------------------------------------------------------------"
			, "# Module Aliases"
			, "#   \\$null = \\$EXPORTED_ALIASES.Add(\"ALIAS_NAME\")"
			, "#-------------------------------------------------------------------------------"
			, "#endregion Module Aliases"
			, ""
			, ""
			, "#region Module Cmdlets"
			, "#-------------------------------------------------------------------------------"
			, "# Module Cmdlets"
			, "#   \\$null = \\$EXPORTED_CMDLETS.Add(\"CMDLET_NAME\")"
			, "#-------------------------------------------------------------------------------"
			, "#endregion Module Cmdlets"
			, ""
			, ""
			, "#region Module Functions"
			, "#-------------------------------------------------------------------------------"
			, "# Module Functions"
			, "#   To export a function, add the following line after it's definition:"
			, "#     \"\"\""
			, "#     \\$null = \\$EXPORTED_FUNCTIONS.Add(\"FUNCTION_NAME\")"
			, "#     \"\"\""
			, "#"
			, "#   To optionally export a function, add the following check after it's "
			, "#   definition:"
			, "#     \"\"\""
			, "#     if(\\$ExportAll) {"
			, "#         \\$null = \\$EXPORTED_FUNCTIONS.Add(\"FUNCTION_NAME\")"
			, "#     }"
			, "#     \"\"\""
			, "#"
			, "# NOTE: Leave an empty line between this comment block's close and the first"
			, "#       function header so it's Get-Help displays correctly."
			, "#-------------------------------------------------------------------------------"
			, "#endregion Module Functions"
			, "#endregion Requirements, Includes, Definitions, and Declarations"
			, ""
			, ""
			, "#==============================================================================="
			, "# 1.0 - Main Process:"
			, "#   1.1 - Export Variables"
			, "#   1.2 - Export Aliases"
			, "#   1.3 - Export Cmdlets"
			, "#   1.4 - Export Functions"
			, "#==============================================================================="
			, "#region Main"
			, "if(\\$SCRIPT:EXPORTED_VARIABLES.Count -gt 0) {"
			, "    Write-Host \"Exporting Variables: '\\$(\\$SCRIPT:EXPORTED_VARIABLES -join \"', '\")'\" -ForegroundColor Cyan"
			, "    Export-ModuleMember -Variable \\$SCRIPT:EXPORTED_VARIABLES"
			, "} #-- /if there are items to export --"
			, ""
			, "if(\\$SCRIPT:EXPORTED_ALIASES.Count -gt 0) {"
			, "    Write-Host \"Exporting Aliases: '\\$(\\$SCRIPT:EXPORTED_ALIASES -join \"', '\")'\" -ForegroundColor Cyan"
			, "    Export-ModuleMember -Alias \\$SCRIPT:EXPORTED_ALIASES"
			, "} #-- /if there are items to export --"
			, ""
			, "if(\\$SCRIPT:EXPORTED_CMDLETS.Count -gt 0) {"
			, "    Write-Host \"Exporting Cmdlets: '\\$(\\$SCRIPT:EXPORTED_CMDLETS -join \"()', '\")()'\" -ForegroundColor Cyan"
			, "    Export-ModuleMember -Cmdlet \\$SCRIPT:EXPORTED_CMDLETS"
			, "} #-- /if there are items to export --"
			, ""
			, "if(\\$SCRIPT:EXPORTED_FUNCTIONS.Count -gt 0) {"
			, "    Write-Host \"Exporting Functions: '\\$(\\$SCRIPT:EXPORTED_FUNCTIONS -join \"()', '\")()'\" -ForegroundColor Cyan"
			, "    Export-ModuleMember -Function \\$SCRIPT:EXPORTED_FUNCTIONS"
			, "} #-- /if there are items to export --"
			, ""
			, "Write-Host \"The '\\$SCRIPT:MODULE_NAME' module has been imported.\" -ForegroundColor Green"
			, "#endregion Main"
		],
	},
	"Custom Write Host": {
		"prefix": "write-host-pretty",
		"description": "Prepare a PowerShell Write-Host cmdlet with pre-pended info.",
		"body": [
			  "Write-Host \"[\\$([DateTime]::Now.ToString('yyyyMMdd.HHmmss')) - ${1:SCRIPT::FUNCTION}]: ${2:MESSAGE}\" ${3:-ForegroundColor ${4:COLOR}}"
		],
	}
}

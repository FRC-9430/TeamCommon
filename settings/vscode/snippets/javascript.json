{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Function Header": {
		"prefix": "fhead",
		"body": [
			"/**"
			, " * ${1:[description]}"
			, " *"
			, " * @author   ${2:Makiah Merritt <makiah.merritt@northwestexteriorpros.com>}"
			, " * @created  ${3:$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE.$CURRENT_HOUR$CURRENT_MINUTE merritm}, Initial version.}"
			, " * @updated  n.a."
			, " * @param    {${7:[type]}} ${8:[param01]} ${9:[description]}"
			, " * @return   {${4:[type]}} ${5:v_return} ${6:[description]}"
			, " *"
			, " * @requires ${10:n.a.}"
			, " */"
		],
	},
	"New Function": {
		"prefix": "fun",
		"body": [
			"/**"
			, " * ${4:[description]}"
			, " *"
			, " * @author   ${5:Makiah Merritt <makiah.merritt@northwestexteriorpros.com>}"
			, " * @created  ${6:$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE.$CURRENT_HOUR$CURRENT_MINUTE merritm}, Initial version.}"
			, " * @updated  n.a."
			, " * @param    {[type]} [param01] [description]"
			, " * @return   {${7:[type]}} ${8:v_return} ${9:[description]}"
			, " *"
			, " * @requires n.a."
			, " */"
			, "function ${1}(${2:[param01]})"
			, "{"
			, "    var v_return = null;"
			, ""
			, "    ${10}"
			, ""
			, "    return v_return;"
			, "} //-- /${1} definition --"
		],
	},
	"New Function - Process Form": {
		"prefix": "fun-processForm",
		"body": [
			"/**"
			, " * ${4:[description]}"
			, " *"
			, " * @author   ${5:Makiah Merritt <makiah.merritt@northwestexteriorpros.com>}"
			, " * @created  ${6:$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE.$CURRENT_HOUR$CURRENT_MINUTE merritm}, Initial version.}"
			, " * @updated  n.a."
			, " * @param    {object} theForm The form object being submitted."
			, " * @return   {${7:[type]}} ${8:v_return} ${9:[description]}"
			, " *"
			, " * @requires n.a."
			, " */"
			, "function test_${1:processForm}()"
			, "{"
			, "    var v_return = null;"
			, "    var theForm = null;"
			, ""
			, "    theForm = {};"
			, ""
			, "    v_return = ${1:processForm}(theForm);"
			, "    Logger.log(v_return);"
			, "    return v_return;"
			, "} //-- /test_${1:processForm}() declaration --"
			, ""
			, "function ${1:processForm}(theForm)"
			, "{"
			, "    var v_return = null;"
			, "    var connection = null;"
			, "    var submissionData = {"
			, "      formTitle: FORM_TITLE,"
			, "      formVersion: FORM_VERSION,"
			, "      submissionSuccessful: \"\","
			, "      formOperator: \"\","
			, "      formOperator_EmployeeId: \"\","
			, "      additionalInfo: \"\", // Process/FormName|R#|E#|J#|PhoneNumber|"
			, "    };"
			, "    var processLog = \"\";"
			, "        processLog = \"#### PARAMETER CHECK ####\""
			, "            + \"\\n\" + \"--->\" + \"theForm = \" + JSON.stringify(theForm);"
			, "    var processLogId = (processLogId == undefined || processLogId == null ? new Date().getTime() : processLogId);"
			, "    CR.performSystemLogging(FORM_NAME, \"[\" + processLogId + \"]${1:processForm}(theForm);\", processLog, \"Submission Attempt\");"
			, ""
			, "    try"
			, "    {"
			, "        //==== DECLARATIONS & INITIALIZATIONS ===="
			, "        var formOperator = theForm.formOperator.toUpperCase().trim();"
			, "            submissionData.formOperator = formOperator;"
			, "        var formOperator_EmployeeId = theForm.formOperator_EmployeeId.trim();"
			, "            submissionData.formOperator_EmployeeId = formOperator_EmployeeId;"
			, "//        var sqlQuery = \"\";"
			, ""
			, "        //==== PROCESS ===="
			, "//        var index = 1;"
			, "//        connection = CR.getDatabaseConnection(\"[\" + processLogId + \"]\" + FORM_NAME + \"::${1:processForm}(...)\");"
			, "//        var preparedStatement = connection.prepareStatement(sqlQuery, Jdbc.ResultSet.TYPE_FORWARD_ONLY, Jdbc.ResultSet.CONCUR_READ_ONLY);"
			, "//        var resultSet = preparedStatement.executeQuery();"
			, "//"
			, "//        var returnedData = [];"
			, "//        while(resultSet.next())"
			, "//        {"
			, "//        } //-- /for each returned result --"
			, "//        if(resultSet != null) { resultSet.close(); }"
			, ""
			, "        //==== CLEAN-UP AND RETURN ===="
			, "        submissionData.submissionSuccessful = 1;"
			, "        CR.logFormSubmission(submissionData, null, processLogId);"
			, ""
			, "        if(connection != null) { CR.closeDatabaseConnection(connection, \"[\" + processLogId + \"]\" + FORM_NAME + \"::${1:processForm}(...)\"); }"
			, ""
			, "//        v_return = returnedData;"
			, "        processLog += \"\\n\\n#### FINAL RETURN ####\""
			, "            + \"\\n\" + \"--->\" + \"v_return = \" + JSON.stringify(v_return);"
			, ""
			, "        CR.performSystemLogging(FORM_NAME, \"[\" + processLogId + \"]${1:processForm}(...) processLog\", processLog, \"Submission Complete\");"
			, "    }"
			, "    catch(error)"
			, "    {"
			, "        if(connection != null) { CR.closeDatabaseConnection(connection, \"[\" + processLogId + \"]\" + FORM_NAME + \"::${1:processForm}(...)::CatchError\"); }"
			, ""
			, "        // send errorReport to IT and return the appropriate error text for this form."
			, "        CR.sendErrorReport(error, FORM_NAME);"
			, ""
			, "        // write to system logs"
			, "        processLog += \"\\n\\n#### CATCH ERROR ####\""
			, "            + \"\\n\" + \"File with Error: \" + error.fileName"
			, "            + \"\\n\" + \"Error Message: \" + error.message"
			, "            + \"\\n\" + \"Error on Line: \" + error.lineNumber"
			, "            + \"\\n\\n\" + \"Error: \" + JSON.stringify(error);"
			, ""
			, "        CR.performSystemLogging(FORM_NAME, \"[\" + processLogId + \"]${1:processForm}(...)::catch(error)\", processLog, \"LOG DUMP\");"
			, "        CR.performSystemLogging(FORM_NAME, \"[\" + processLogId + \"]${1:processForm}(...)::catch(error)\", error, \"File with Error: \" + error.fileName"
			, "            + \"\\n\" + \"Error Message: \" + error.message"
			, "            + \"\\n\" + \"Error on Line: \" + error.lineNumber);"
			, ""
			, "        submissionData.submissionSuccessful = 0;"
			, "        CR.logFormSubmission(submissionData, null, processLogId);"
			, ""
			, "        // Return Error HTML text for display in page."
			, "        v_return = \"<h2 id='error'>ERROR! Please refresh this page and try again.</h2><h2>If this problem persits please contact IT for support.</h2>\";"
			, "    }"
			, "    finally"
			, "    {"
			, "        return v_return;"
			, "    }"
			, "} //-- /${1:processForm}() declaration --"
		],
	},
	"New Function - Query": {
		"prefix": "fun-query",
		"body": [
			"/**"
			, " * ${4:[description]}"
			, " *"
			, " * @author   ${5:Makiah Merritt <makiah.merritt@northwestexteriorpros.com>}"
			, " * @created  ${6:$CURRENT_YEAR$CURRENT_MONTH$CURRENT_DATE.$CURRENT_HOUR$CURRENT_MINUTE merritm}, Initial version.}"
			, " * @updated  n.a."
			, " * @param    ${10:[type]} ${2:[param01]} ${11:[description]}"
			, " * @return   {${7:[type]}} ${8:v_return} ${9:[description]}"
			, " *"
			, " * @requires n.a."
			, " */"
			, "function test_${1}()"
			, "{"
			, "    var v_return = null;"
			, ""
			, "    v_return = ${1}(${2:[param01]});"
			, "    Logger.log(v_return);"
			, "    return v_return;"
			, "} //-- /test_${1}() declaration --"
			, ""
			, "function ${1}(${2:[param01]})"
			, "{"
			, "    var v_return = null;"
			, "    var connection = null;"
			, "    var processLog = \"\";"
			, "        processLog = \"#### PARAMETER CHECK ####\""
			, "            + \"\\n\" + \"--->\" + \"${2:[param01]} = \" + JSON.stringify(${2:[param01]})"
			, "            + \"\\n\" + \"--->\" + \"(optional) processLogId = \" + (processLogId == undefined || processLogId == null ? \"NOT PASSED\" : processLogId);"
			, "    processLogId = (processLogId == undefined || processLogId == null ? new Date().getTime() : processLogId);"
			, "    CR.performSystemLogging(FORM_NAME, \"[\" + processLogId + \"]${1}(${2:[param01]});\", processLog, \"Function Start\");"
			, ""
			, "    try"
			, "    {"
			, "        //==== DECLARATIONS & INITIALIZATIONS ===="
			, "        var sqlQuery = \"\";"
			, ""
			, "        //==== PROCESS ===="
			, "        var index = 1;"
			, "        connection = CR.getDatabaseConnection(\"[\" + processLogId + \"]\" + FORM_NAME + \"::${1}(...)\");"
			, "        var preparedStatement = connection.prepareStatement(sqlQuery, Jdbc.ResultSet.TYPE_FORWARD_ONLY, Jdbc.ResultSet.CONCUR_READ_ONLY);"
			, "        var resultSet = preparedStatement.executeQuery();"
			, ""
			, "        var returnedData = [];"
			, "        while(resultSet.next())"
			, "        {"
			, "            var data = null;"
			, "            returnedData.push(data);"
			, "        } //-- /for each returned result --"
			, "        if(resultSet != null) { resultSet.close(); }"
			, ""
			, "        //==== CLEAN-UP AND RETURN ===="
			, "        if(connection != null) { CR.closeDatabaseConnection(connection, \"[\" + processLogId + \"]\" + FORM_NAME + \"::${1}(...)\"); }"
			, ""
			, "        v_return = returnedData;"
			, "        processLog += \"\\n\\n#### FINAL RETURN ####\""
			, "            + \"\\n\" + \"--->\" + \"v_return = \" + JSON.stringify(v_return);"
			, ""
			, "        CR.performSystemLogging(FORM_NAME, \"[\" + processLogId + \"]${1}(...) processLog\", processLog, \"Function Complete\");"
			, "    }"
			, "    catch(error)"
			, "    {"
			, "        if(connection != null) { CR.closeDatabaseConnection(connection, \"[\" + processLogId + \"]\" + FORM_NAME + \"::${1}(...)::CatchError\"); }"
			, ""
			, "        // send errorReport to IT and return the appropriate error text for this form."
			, "        CR.sendErrorReport(error, FORM_NAME);"
			, ""
			, "        // write to system logs"
			, "        processLog += \"\\n\\n#### CATCH ERROR ####\""
			, "            + \"\\n\" + \"File with Error: \" + error.fileName"
			, "            + \"\\n\" + \"Error Message: \" + error.message"
			, "            + \"\\n\" + \"Error on Line: \" + error.lineNumber"
			, "            + \"\\n\\n\" + \"Error: \" + JSON.stringify(error);"
			, ""
			, "        CR.performSystemLogging(FORM_NAME, \"[\" + processLogId + \"]${1}(...)::catch(error)\", processLog, \"LOG DUMP\");"
			, "        CR.performSystemLogging(FORM_NAME, \"[\" + processLogId + \"]${1}(...)::catch(error)\", error, \"File with Error: \" + error.fileName"
			, "            + \"\\n\" + \"Error Message: \" + error.message"
			, "            + \"\\n\" + \"Error on Line: \" + error.lineNumber);"
			, ""
			, "        // Return Error HTML text for display in page."
			, "        v_return = \"<h2 id='error'>ERROR! Please refresh this page and try again.</h2><h2>If this problem persits please contact IT for support.</h2>\";"
			, "    }"
			, "    finally"
			, "    {"
			, "        return v_return;"
			, "    }"
			, "} //-- /${1}() declaration --"
		],
	},
	"Hide Element": {
		"prefix": "display-none",
		"body": [
			"document.getElementById(${1:elementId}).style.display = \"none\";"
		],
	},
	"Show Element": {
		"prefix": "display-block",
		"body": [
			"document.getElementById(${1:elementId}).style.display = \"block\";"
		],
	},
	"Get Element - ID": {
		"prefix": "getElementById",
		"body": [
			"var ${2:element} = document.getElementById(${1:elementId});"
		],
	},
	"Get Elements - CLASS": {
		"prefix": "getElementsByClassName",
		"body": [
			"var ${2:elements} = document.getElementsByClassName(${1:className});"
		],
	},
	"Set Element Value - ID": {
		"prefix": "setElementById",
		"body": [
			"document.getElementById(${1:elementId}).value = ${2};"
		],
	},
}
